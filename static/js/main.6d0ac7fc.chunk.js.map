{"version":3,"sources":["components/Header.js","components/Hangman.js","components/Letter.js","components/Word.js","components/Board.js","components/GuessBoard.js","components/GameOver.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","React","Component","Hangman","guesses","this","props","style","animationName","Letter","className","maxWordLength","width","value","Word","letters","split","map","letter","guessedLetters","includes","key","Board","words","sort","a","b","length","word","GuessBoard","state","letterCards","onClick","handleClick","GameOver","win","App","resetGame","fetch","mode","then","response","json","setState","toUpperCase","gameOver","guessLetter","join","push","checkWin","forEach","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6d0ac7fc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"app-header\">\r\n                <h1 id=\"app-title\">HANGMAN</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport '../css/hangman.css'\r\n\r\nclass Hangman extends React.Component {\r\n\r\n\r\n    render(){\r\n        const {guesses} = this.props\r\n        return(\r\n            <div id=\"hangman-container\">\r\n                <div id=\"hangman-stake\">\r\n                </div>\r\n                <div id=\"hangman\">\r\n                    <div id=\"hangman-head\" style={{animationName: guesses > 0 ? \"draw\" : \"none\"}}>\r\n\r\n                    </div>\r\n                    <div id=\"hangman-body\" style={{animationName: guesses > 1 ? \"draw\" : \"none\"}}>\r\n                        \r\n                    </div>\r\n                    <div id=\"hangman-leftarm\" style={{animationName: guesses > 2 ? \"draw\" : \"none\"}}>\r\n\r\n                    </div>\r\n                    <div id=\"hangman-rightarm\" style={{animationName: guesses > 3 ? \"draw\" : \"none\"}}>\r\n\r\n                    </div>\r\n                    <div id=\"hangman-leftleg\" style={{animationName: guesses > 4 ? \"draw\" : \"none\"}}>\r\n\r\n                    </div>\r\n                    <div id=\"hangman-rightleg\" style={{animationName: guesses > 5 ? \"draw\" : \"none\"}}>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Hangman;","import React from 'react';\r\n\r\nclass Letter extends React.Component {\r\n\r\n\r\n    render(){\r\n        // console.log(this.props.maxWordLength)\r\n        return(\r\n            <div className=\"letter\" style={this.props.maxWordLength > 8 ? (this.props.maxWordLength > 11 ? {width: \"35px\"} : {width: \"50px\"}) : {}}>\r\n                <span>{this.props.value}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Letter;","import React from 'react';\r\nimport Letter from './Letter';\r\n\r\nclass Word extends React.Component {\r\n\r\n\r\n    render(){\r\n        const letters = this.props.letters.split(\"\").map((letter, id) => {\r\n            return <Letter \r\n                value={this.props.guessedLetters.includes(letter) ? letter : \" \"} // if letter is not guessed, return blank\r\n                key={id}\r\n                maxWordLength={this.props.maxWordLength}\r\n            />\r\n        })\r\n        return(\r\n            <div className=\"word\">\r\n                {letters}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Word;","import React from 'react';\r\nimport Word from './Word';\r\n\r\nimport '../css/board.css';\r\n\r\nclass Board extends React.Component {\r\n\r\n\r\n    render(){\r\n        const maxWordLength = this.props.words.sort(function(a, b){return b.length - a.length})[0].length\r\n        const words = this.props.words.map((word) => {\r\n            return <Word \r\n                maxWordLength={maxWordLength} \r\n                key={word} \r\n                letters={word} \r\n                guessedLetters={this.props.guessedLetters}  \r\n            />\r\n        })\r\n        return(\r\n            <div id=\"board\">\r\n                {words}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n\r\nimport '../css/guess-board.css';\r\n\r\nclass GuessBoard extends React.Component {\r\n    state = {\r\n        letters: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\r\n    }\r\n\r\n    render(){\r\n        const letterCards = this.state.letters.split(\"\").map((letter) => {\r\n            return (\r\n                this.props.guessedLetters.includes(letter) ? \r\n                <div \r\n                    key={letter} \r\n                    className=\"letter-card guessed-card\"\r\n                >\r\n                    {letter}\r\n                </div>\r\n\r\n                :\r\n\r\n                <div \r\n                    onClick={() => this.props.handleClick(letter)} \r\n                    key={letter} \r\n                    className=\"letter-card\"\r\n                >\r\n                    {letter}\r\n                </div>\r\n            )\r\n        })\r\n        return(\r\n            <div id=\"guess-board\">\r\n                {letterCards}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GuessBoard;","import React from 'react';\r\n\r\nimport '../css/game-over.css';\r\nclass GameOver extends React.Component {\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <div id=\"game-over\" >\r\n                <h1>GAME OVER</h1>\r\n                <h2>YOU {this.props.win ? \"WON\" : \"LOST\"}, </h2>\r\n                <h2>THE WORD WAS: <span id=\"guessed-word\">{this.props.words}</span></h2>\r\n                <h3 id=\"try-again-button\" onClick={this.props.handleClick}>Try Again</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameOver;","import React from 'react';\r\nimport Header from './components/Header';\r\nimport Hangman from './components/Hangman';\r\nimport Board from './components/Board';\r\nimport GuessBoard from './components/GuessBoard'\r\n\r\nimport GameOver from './components/GameOver'\r\n\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n      this.state = {\r\n        words: [\"YOU\", \"ARE\", \"A\", \"FAGGOT\"],\r\n        guessedLetters: [],\r\n        guesses: 0,\r\n        gameOver: false,\r\n      }\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch(\"https://random-word-api.herokuapp.com/word?number=1\", {mode: \"cors\"})\r\n      .then(function(response){\r\n          return response.json();\r\n      })\r\n      .then((response) => {\r\n          this.setState({\r\n            words: response.map(function(word){return word.toUpperCase()}),\r\n          });\r\n      });\r\n  }\r\n\r\n  resetGame = () => {\r\n    fetch(\"https://random-word-api.herokuapp.com/word?number=1\", {mode: \"cors\"})\r\n      .then(function(response){\r\n          return response.json();\r\n      })\r\n      .then((response) => {\r\n          this.setState({\r\n            words: response.map(function(word){return word.toUpperCase()}),\r\n          });\r\n      });\r\n    this.setState({\r\n      words: [\"YOU\", \"ARE\", \"A\", \"FAGGOT\"],\r\n      guessedLetters: [],\r\n      guesses: 0,\r\n      gameOver: false,\r\n    })\r\n  }\r\n\r\n  guessLetter = (letter) => {\r\n    const {words, guessedLetters} = this.state;\r\n    let guesses = words.join(\"\").includes(letter) ? this.state.guesses : this.state.guesses + 1;\r\n    guessedLetters.push(letter);\r\n\r\n    this.setState({\r\n      words: words,\r\n      guessedLetters: guessedLetters,\r\n      guesses: guesses,\r\n      gameOver: (guesses > 5 || this.checkWin()),\r\n      win: this.checkWin(),\r\n    })\r\n  }\r\n\r\n  checkWin = () => {\r\n    const {words, guessedLetters} = this.state;\r\n    let win = true;\r\n    words.join(\"\").split(\"\").forEach(function(letter){\r\n      if(!guessedLetters.includes(letter)) win = false;\r\n    })\r\n    return win;\r\n\r\n  }\r\n\r\n  render(){\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <Header/>\r\n        <Hangman guesses={this.state.guesses}/>\r\n        <Board words={this.state.words} guessedLetters={this.state.guessedLetters}/>\r\n        <GuessBoard handleClick={this.guessLetter} guessedLetters={this.state.guessedLetters}/>\r\n        {this.state.gameOver ? <GameOver handleClick={this.resetGame} win={this.state.win} words={this.state.words}/> : null}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}